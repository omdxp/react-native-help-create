"use strict";(self.webpackChunkrnhc_docs=self.webpackChunkrnhc_docs||[]).push([[2443],{9365:(e,n,a)=>{a.d(n,{A:()=>l});var t=a(6540),r=a(53);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.A)(o,l),hidden:a},n)}},4865:(e,n,a)=>{a.d(n,{A:()=>d});var t=a(8168),r=a(6540),o=a(53),l=a(2303),i=a(1682),s=a(6976),c=a(3104);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:n,block:a,defaultValue:l,values:m,groupId:d,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??y.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),N=(0,i.X)(h,((e,n)=>e.value===n.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===l?l:l??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,s.x)(),[w,C]=(0,r.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.a_)();if(null!=d){const e=b[d];null!=e&&e!==w&&h.some((n=>n.value===e))&&C(e)}const k=e=>{const n=e.currentTarget,a=x.indexOf(n),t=h[a].value;t!==w&&(T(n),C(t),null!=d&&v(d,String(t)))},_=e=>{let n=null;switch(e.key){case"Enter":k(e);break;case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;n=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;n=x[a]??x[x.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,o.A)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.A)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>x.push(e),onKeyDown:_,onClick:k},l,{className:(0,o.A)("tabs__item",u,l?.className,{"tabs__item--active":w===n})}),a??n)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function d(e){const n=(0,l.A)();return r.createElement(m,(0,t.A)({key:String(n)},e))}},1133:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var t=a(8168),r=(a(6540),a(5680)),o=a(4865),l=a(9365),i=a(7964);const s={sidebar_position:6},c="Notes",p={unversionedId:"notes",id:"notes",title:"Notes",description:"- To see the available commands for rnhc you can run:",source:"@site/docs/notes.mdx",sourceDirName:".",slug:"/notes",permalink:"/react-native-help-create/docs/notes",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Combine Screens",permalink:"/react-native-help-create/docs/combine/combine-screens"}},u={},m=[],d={toc:m};function g(e){let{components:n,...a}=e;return(0,r.yg)("wrapper",(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"notes"},"Notes"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To see the available commands for ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," you can run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc --help\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To see the available positionals and options for a specific command like ",(0,r.yg)("inlineCode",{parentName:"li"},"create")," you can run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --help\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"In order to ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," to work, you must be at the root of your React Native project. It will check and if somehow you are not at the root of the project, ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," will prompt:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"You don't seem to be at the root of a react native project\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"In ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," command, ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc")," will create files with the project's used language, so if the project is written with TypeScript, it will write files with TypeScript, the same apply for JavaScript.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you are in a JavaScript project and somehow you want to create your component or screen in TypeScript, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"--typescript")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"--ts")," option:"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -s test-screen --ts\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"It doesn't matter what case you name your component or screen, ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," will always create a component or screen with the same name, but with the first letter in uppercase, and the folder will be in kebab case. So if you name your component with ",(0,r.yg)("inlineCode",{parentName:"li"},"test-comp"),", it will create a component or screen with the name ",(0,r.yg)("inlineCode",{parentName:"li"},"TestComp")," in the ",(0,r.yg)("inlineCode",{parentName:"li"},"index.jsx")," file under the ",(0,r.yg)("inlineCode",{parentName:"li"},"./src/components/test-comp/")," folder. Check the example below:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -c test-comp\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -c testComp\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -c TestComp\n")),(0,r.yg)("p",null,"The above commands produce the same outcome:"),(0,r.yg)(o.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(i.A,{language:"jsx",mdxType:"CodeBlock"},"src/\n\u2514\u2500\u2500 components\n    \u2514\u2500\u2500 test-comp\n        \u251c\u2500\u2500 __tests__\n        \u2502\xa0\xa0 \u2514\u2500\u2500 index.spec.jsx\n        \u251c\u2500\u2500 index.jsx\n        \u2514\u2500\u2500 styles.js")),(0,r.yg)(l.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(i.A,{language:"tsx",mdxType:"CodeBlock"},"src/\n\u2514\u2500\u2500 components\n    \u2514\u2500\u2500 test-comp\n        \u251c\u2500\u2500 __tests__\n        \u2502\xa0\xa0 \u2514\u2500\u2500 index.spec.tsx\n        \u251c\u2500\u2500 index.tsx\n        \u2514\u2500\u2500 styles.ts"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You can always overwrite your implementation using the ",(0,r.yg)("inlineCode",{parentName:"li"},"--overwrite")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"-o")," option, for example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -c test-component -o\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -s TestScreen -o\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -r -o\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --reducer testReducer -o\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --action testReducer test-action -o\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This is helpful when you want to update your navigation files, for example you already have a navigation file in ",(0,r.yg)("inlineCode",{parentName:"li"},"src/screens/")," folder and you want to update it with the new screens you created:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -n stack --overwrite\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When creating reducers you should have already a redux implmentation created with ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc create -r")," so it can work.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When creating actions, you should have already a redux implementation created with ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc create -r")," as well as an existed reducer with ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc create --reducer <reducer-name>")," so it can create actions for that specific reducer.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Creating and deleting reducers and actions will not just delete files, but also update other files that depends on them under the ",(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/")," folder (Or your specified path for the root of redux folder in ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc.config.json"),").")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"--silent")," option to avoid the prompts for all commands:"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -c foo --silent\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," will recommend you similar commands if you type a command that doesn't exist. For example, if you type ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc crete -c"),", it will prompt you with the following:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc <command> [option]\n\nCommands:\n  rnhc create [name]   Create components, screens, navigations and redux\n                       implementation\n  rnhc delete [name]   Delete components, screens, navigations and redux\n                       implementation\n  rnhc combine [name]  Combine components or screens in a folder\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --silent   Do not show log messages                                  [boolean]\n  --help     Show help                                                 [boolean]\n\nDid you mean create?\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"When creating, deleting or combining components in atom design pattern, if you provide more than one type (e.g ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc create -c test --atom --molecule"),"), ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc")," will prompt you to choose one of them.")))}g.isMDXComponent=!0}}]);