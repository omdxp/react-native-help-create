"use strict";(self.webpackChunkrnhc_docs=self.webpackChunkrnhc_docs||[]).push([[2223],{9365:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(6540),r=t(53);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(l,i),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>m});var a=t(8168),r=t(6540),l=t(53),i=t(2303),o=t(1682),u=t(6976),c=t(3104);const s="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:i,values:p,groupId:m,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??y.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),x=(0,o.X)(h,((e,n)=>e.value===n.value));if(x.length>0)throw new Error(`Docusaurus error: Duplicate values "${x.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const T=null===i?i:i??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==T&&!h.some((e=>e.value===T)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${T}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:A}=(0,u.x)(),[N,b]=(0,r.useState)(T),v=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.a_)();if(null!=m){const e=f[m];null!=e&&e!==N&&h.some((n=>n.value===e))&&b(e)}const w=e=>{const n=e.currentTarget,t=v.indexOf(n),a=h[t].value;a!==N&&(C(n),b(a),null!=m&&A(m,String(a)))},k=e=>{let n=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=v.indexOf(e.currentTarget)+1;n=v[t]??v[0];break}case"ArrowLeft":{const t=v.indexOf(e.currentTarget)-1;n=v[t]??v[v.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,l.A)("tabs-container",s)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},g)},h.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>v.push(e),onKeyDown:k,onClick:w},i,{className:(0,l.A)("tabs__item",d,i?.className,{"tabs__item--active":N===n})}),t??n)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function m(e){const n=(0,i.A)();return r.createElement(p,(0,a.A)({key:String(n)},e))}},413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>p});var a=t(8168),r=(t(6540),t(5680)),l=t(4865),i=t(9365),o=t(7964);const u={sidebar_position:6},c="Create Redux",s={unversionedId:"create/create-redux",id:"create/create-redux",title:"Create Redux",description:"To create a redux implementation run:",source:"@site/docs/create/create-redux.mdx",sourceDirName:"create",slug:"/create/create-redux",permalink:"/react-native-help-create/docs/create/create-redux",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Using Templates",permalink:"/react-native-help-create/docs/create/using-templates"},next:{title:"Using Configuration",permalink:"/react-native-help-create/docs/create/using-configuration"}},d={},p=[{value:"Create a reducer",id:"create-a-reducer",level:2},{value:"Example",id:"example",level:3},{value:"Create multiple reducers",id:"create-multiple-reducers",level:2},{value:"Create an action",id:"create-an-action",level:2},{value:"Example",id:"example-1",level:3},{value:"Create multiple actions",id:"create-multiple-actions",level:2}],m={toc:p};function g(e){let{components:n,...t}=e;return(0,r.yg)("wrapper",(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"create-redux"},"Create Redux"),(0,r.yg)("p",null,"To create a redux implementation run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create -r\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This will create a ",(0,r.yg)("inlineCode",{parentName:"li"},"redux")," folder under the ",(0,r.yg)("inlineCode",{parentName:"li"},"src/")," folder containing the following:")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{mdxType:"CodeBlock"},"src/\n\u2514\u2500\u2500 redux\n    \u251c\u2500\u2500 actions\n    \u2502   \u2514\u2500\u2500 general\n    \u2502       \u2514\u2500\u2500 index.js\n    \u251c\u2500\u2500 index.js\n    \u2514\u2500\u2500 reducers\n        \u251c\u2500\u2500 general\n        \u2502   \u2514\u2500\u2500 index.js\n        \u2514\u2500\u2500 index.js")),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{mdxType:"CodeBlock"},"src/\n\u2514\u2500\u2500 redux\n    \u251c\u2500\u2500 actions\n    \u2502   \u2514\u2500\u2500 general\n    \u2502       \u2514\u2500\u2500 index.ts\n    \u251c\u2500\u2500 index.ts\n    \u2514\u2500\u2500 reducers\n        \u251c\u2500\u2500 general\n        \u2502   \u2514\u2500\u2500 index.ts\n        \u2514\u2500\u2500 index.ts"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Where ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," under the ",(0,r.yg)("inlineCode",{parentName:"li"},"redux")," folder contains the redux store definition:")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'import { applyMiddleware, compose, createStore } from "redux";\n\nimport { mainReducer } from "./reducers";\nimport thunk from "redux-thunk";\n\n/**\n * the main redux state, with all the reducers\n */\nexport const mainStore = createStore(\n  mainReducer,\n  compose(applyMiddleware(thunk))\n);\n\n/**\n * Creates a new redux state each time this function is called, this is used only for unit tests, to ensure that we have fresh state on each individual test\n */\nexport const createMainStore = () => {\n  return createStore(mainReducer, compose(applyMiddleware(thunk)));\n};\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { applyMiddleware, compose, createStore } from "redux";\nimport thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";\n\nimport { mainReducer } from "./reducers";\n\n/**\n * the main redux state, with all the reducers\n */\nexport const mainStore = createStore(\n  mainReducer,\n  compose(applyMiddleware(thunk))\n);\n\n/**\n * Creates a new redux state each time this function is called, this is used only for unit tests, to ensure that we have fresh state on each individual test\n */\nexport const createMainStore = () => {\n  return createStore(mainReducer, compose(applyMiddleware(thunk)));\n};\n\nexport type StateInterface = ReturnType<typeof mainStore.getState>;\n\n/**\n * list of action types\n */\nexport type ActionType = "UPDATE_GENERAL";\n\nexport interface Action<T> {\n  type: ActionType;\n  payload: Partial<T>;\n}\nexport type ThunkResult<\n  A = Record<string, unknown>,\n  E = Record<string, unknown>\n> = ThunkAction<void, StateInterface, E, Action<A>>;\n\nexport type Dispatch<A> = ThunkDispatch<\n  StateInterface,\n  Record<string, unknown>,\n  Action<A>\n>;\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"And ",(0,r.yg)("inlineCode",{parentName:"p"},"actions")," folder contains the action for each reducer, as for a example, at first ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc")," will create a sample reducer and action which is called ",(0,r.yg)("inlineCode",{parentName:"p"},"general"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"general")," action's ",(0,r.yg)("inlineCode",{parentName:"p"},"index.*")," contains:"))),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'// write your general actions here\n\n// this is an example for an action\nexport const initAction = () => async (dispatch, getState) => {\n  dispatch({ type: "UPDATE_GENERAL", payload: { message: "init created!" } })\n};\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { GeneralState } from "../../reducers/general";\nimport { ThunkResult } from "../..";\n\n// write your general actions here\n\n// this is an example for an action\nexport const initAction =\n  (): ThunkResult<GeneralState> => async (dispatch, getState) => {\n    dispatch({ type: "UPDATE_GENERAL", payload: { message: "init created!" } });\n  };\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"And the ",(0,r.yg)("inlineCode",{parentName:"li"},"general")," reducer's ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," contains:")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'const initialState = { message: "" };\n\nexport const general = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case "UPDATE_GENERAL":\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { Action } from "../..";\n\nexport interface GeneralState {\n  message: string;\n}\n\nexport const general = (\n  state: GeneralState = {\n    message: "",\n  },\n  action: Action<GeneralState>\n) => {\n  switch (action.type) {\n    case "UPDATE_GENERAL":\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"And the ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," file under the ",(0,r.yg)("inlineCode",{parentName:"li"},"reducers")," folder contains the following:")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'import { combineReducers } from "redux";\nimport { general } from "./general";\n\nexport const mainReducer = combineReducers({\n  general,\n});\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { combineReducers } from "redux";\nimport { general } from "./general";\n\nexport const mainReducer = combineReducers({\n  general,\n});\n'))),(0,r.yg)("h1",{id:"reducers"},"Reducers"),(0,r.yg)("h2",{id:"create-a-reducer"},"Create a reducer"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To create a reducer, you must have a redux implementation then run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --reducer <reducer-name>\n")),(0,r.yg)("h3",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --reducer auth\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This will create a ",(0,r.yg)("inlineCode",{parentName:"li"},"auth")," reducer under the ",(0,r.yg)("inlineCode",{parentName:"li"},"src/redux/reducers/")," folder and the ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," for this reducer will contain the same code written in the template.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/reducers/auth/index.*")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},"const initialState = { };\n\nexport const auth = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n")),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { Action } from "../..";\n\nexport interface AuthState { }\n\nexport const auth = (\n  state: AuthState = { },\n  action: Action<AuthState>,\n) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"It will also add the reducer to the ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," file under the ",(0,r.yg)("inlineCode",{parentName:"li"},"reducers")," folder to use it in the ",(0,r.yg)("inlineCode",{parentName:"li"},"combineReducers")," function.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/reducers/index.*")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'import { combineReducers } from "redux";\nimport { auth } from "./auth";\nimport { general } from "./general";\n\nexport const mainReducer = combineReducers({\n  auth,\n  general,\n});\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { combineReducers } from "redux";\nimport { auth } from "./auth";\nimport { general } from "./general";\n\nexport const mainReducer = combineReducers({\n  auth,\n  general,\n});\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"If you don't have a redux implementation create using ",(0,r.yg)("inlineCode",{parentName:"li"},"rnhc create -r"),", this command will prompt:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"Redux implementation does not exist\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You can also overwrite the reducer by running:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --reducer <reducer-name> -o\n")),(0,r.yg)("h2",{id:"create-multiple-reducers"},"Create multiple reducers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To create multiple reducers, you must have a redux implementation then run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --reducer <reducer-name-1> <reducer-name-2> ...\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This will also update your ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," file under the ",(0,r.yg)("inlineCode",{parentName:"li"},"reducers")," folder to use the reducers you created.")),(0,r.yg)("h1",{id:"actions"},"Actions"),(0,r.yg)("h2",{id:"create-an-action"},"Create an action"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To create an action, you must have a redux implementation as wee as the reducer you want to add an action for it, then run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --action <reducer-name> <action-name>\n")),(0,r.yg)("h3",{id:"example-1"},"Example"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"In this example we are going to create an action for the ",(0,r.yg)("inlineCode",{parentName:"li"},"auth")," reducer, so we will run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --action auth login\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This will create a ",(0,r.yg)("inlineCode",{parentName:"li"},"login")," action under the ",(0,r.yg)("inlineCode",{parentName:"li"},"src/redux/actions/auth/")," folder and the ",(0,r.yg)("inlineCode",{parentName:"li"},"login.*")," for this action will contain the same code written in the template.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/actions/auth/login.*")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'export const loginAction = () => async (dispatch, getState) => {\n  dispatch({ type: "AUTH_LOGIN", payload: { } })\n}\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'import { AuthState } from "../../reducers/auth";\nimport { ThunkResult } from "../..";\n\nexport const loginAction = (): ThunkResult<AuthState> => async (dispatch, getState) => {\n  dispatch({ type: "AUTH_LOGIN", payload: { } })\n}\n'))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"And it will update the ",(0,r.yg)("inlineCode",{parentName:"li"},"index.*")," file under ",(0,r.yg)("inlineCode",{parentName:"li"},"src/redux/actions/auth/")," to export the action.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/actions/auth/index.*")),(0,r.yg)(l.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.yg)(o.A,{language:"js",mdxType:"CodeBlock"},'export { loginAction } from "./login";\n')),(0,r.yg)(i.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)(o.A,{language:"ts",mdxType:"CodeBlock"},'export { loginAction } from "./login";\n'))),(0,r.yg)("h2",{id:"create-multiple-actions"},"Create multiple actions"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To create multiple actions, you must have a redux implementation and existed reducer, then run:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"rnhc create --action <reducer-name> <action-name-1> <action-name-2> ...\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"If the reducer doesn't exist, you will get an error like this:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"./src/redux/reducers/x does not exist\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Keep in mind that this also works for TypeScript projects. Even better when creating an action for a reducer in TypeScript, you will get TypeScript support as well as updating the ",(0,r.yg)("inlineCode",{parentName:"li"},"ActionType")," in the ",(0,r.yg)("inlineCode",{parentName:"li"},"src/redux/index.ts")," file. For example if you create an action for the ",(0,r.yg)("inlineCode",{parentName:"li"},"auth")," reducer, you will get the following:")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"src/redux/index.ts")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'import { applyMiddleware, compose, createStore } from "redux";\nimport thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";\n\nimport { mainReducer } from "./reducers";\n\n/**\n * the main redux state, with all the reducers\n */\nexport const mainStore = createStore(\n  mainReducer,\n  compose(applyMiddleware(thunk))\n);\n\n/**\n * Creates a new redux state each time this function is called, this is used only for unit tests, to ensure that we have fresh state on each individual test\n */\nexport const createMainStore = () => {\n  return createStore(mainReducer, compose(applyMiddleware(thunk)));\n};\n\nexport type StateInterface = ReturnType<typeof mainStore.getState>;\n\n/**\n * list of action types\n */\nexport type ActionType = "AUTH_LOGIN" | "UPDATE_GENERAL";\n\nexport interface Action<T> {\n  type: ActionType;\n  payload: Partial<T>;\n}\nexport type ThunkResult<\n  A = Record<string, unknown>,\n  E = Record<string, unknown>\n> = ThunkAction<void, StateInterface, E, Action<A>>;\n\nexport type Dispatch<A> = ThunkDispatch<\n  StateInterface,\n  Record<string, unknown>,\n  Action<A>\n>;\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"It will also update the necessary files that imports and exports modules in order to use the action in the reducer.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Also another note, if you prefer not using ",(0,r.yg)("inlineCode",{parentName:"p"},"redux-thunk")," you can set that in ",(0,r.yg)("inlineCode",{parentName:"p"},"rnhc.config.json")," file, this will let you create your store and actions without applying the ",(0,r.yg)("inlineCode",{parentName:"p"},"redux-thunk")," middleware (For more details check ",(0,r.yg)("a",{parentName:"p",href:"./using-configuration"},"configuration section"),")."))))}g.isMDXComponent=!0}}]);